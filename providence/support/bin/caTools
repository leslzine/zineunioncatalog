#!/usr/bin/env php
<?php
	if (!_caToolsLoadSetupPHP()) {
		die("Could not find your CollectiveAccess setup.php file! Please set the COLLECTIVEACCESS_HOME environment variable to the location of your CollectiveAccess installation, or run this command from a sub-directory of your CollectiveAccess installation.\n");
	}
	require_once(__CA_MODELS_DIR__."/ca_locales.php");
	require_once(__CA_APP_DIR__."/helpers/utilityHelpers.php");
	require_once(__CA_APP_DIR__."/helpers/CLIHelpers.php");
	require_once(__CA_LIB_DIR__."/Utils/CLITools.php");
	require_once(__CA_LIB_DIR__."/Zend/Console/Getopt.php");

	if (!caIsRunFromCLI()) {
		die("Sorry, caTools must be run from the command line!\n");
	}

	$o_config = Configuration::load();
	$g_ui_locale = $o_config->get('locale_default');
	$t_locale = new ca_locales();
	$g_ui_locale_id = $t_locale->localeCodeToID($g_ui_locale);		// get current UI locale as locale_id	  (available as global)
	initializeLocale($g_ui_locale);
	$vn_error_code = 1;

    $vs_cmd = strtolower(str_replace("-", "_", $argv[1]));

	$va_available_cli_opts = array_merge(array(
			"hostname|h-s" => 'Hostname of installation. If omitted default installation is used.',
			"help" => "Displays available commands with descriptions."
		), method_exists("CLITools", "{$vs_cmd}ParamList") ? call_user_func("CLITools::{$vs_cmd}ParamList") : array());

	try {
		$o_opts = new Zend_Console_Getopt($va_available_cli_opts);
		$o_opts->parse();
	} catch(Exception $e) {
		die("Invalid options specified. Try 'caTools help' to view list of valid options.\n");
	}
	if ($vs_hostname = $o_opts->getOption('hostname')) {
		$_SERVER['HTTP_HOST'] = $vs_hostname;
	}

	$va_args = $o_opts->getRemainingArgs();

	$vs_app_heading = CLITools::textWithColor(_t("CollectiveAccess %1 (%2/%3) Utilities\n(c) 2013-2014 Whirl-i-Gig",__CollectiveAccess__, __CollectiveAccess_Schema_Rev__, __CollectiveAccess_Release_Type__), "bold_blue")."\n\n";

	print $vs_app_heading;

	if (method_exists("CLITools", $vs_cmd) || ((strtolower($vs_cmd) === 'help') && (sizeof($va_args) > 1))) {
		if ((sizeof($va_args) > 1) && ((strtolower($va_args[1]) === 'help') || (strtolower($vs_cmd) === 'help'))) {
			//
			// Full-length help for command
			//
			if (strtolower($vs_cmd) === 'help') {
				$vs_cmd = $va_args[1];
			}
			$vs_cmd_proc = strtolower(str_replace("-", "_", $vs_cmd));
			if (method_exists("CLITools", $vs_cmd_proc)) {

				print CLITools::textWithColor("Help for \"{$vs_cmd}\":", "bold_green")."\n\n";
				print "\t".wordwrap(call_user_func_array("CLITools::{$vs_cmd_proc}Help", array($o_opts)), 90, "\n\t")."\n\n";


				$va_opts = call_user_func_array("CLITools::{$vs_cmd_proc}ParamList", array($o_opts));

				if (is_array($va_opts) && sizeof($va_opts)) {
					print CLITools::textWithColor("Options for {$vs_cmd_proc} are:", "bold_green")."\n\n";
					foreach($va_opts as $vs_opt_format => $vs_opt_desc) {
						$va_tmp = explode("|", $vs_opt_format);
						$va_abbr = preg_split("![=\-]+!", $va_tmp[1]);

						print "\t".CLITools::textWithColor(str_pad("--".$va_tmp[0]." ".($va_abbr[0] ? "(-{$va_abbr[0]})" : ""), 20), "red").wordwrap($vs_opt_desc, 75, "\n\t".str_repeat(" ", 20))."\n\n";
					}
				}
			} else {
				print CLITools::textWithColor("No help is available for \"{$vs_subcmd}\"\n", "bold_red");
			}
			print "\nFor more information visit http://www.collectiveaccess.org\n\n";
		} else {
			//
			// Execute command
			//

			call_user_func_array("CLITools::{$vs_cmd}", array($o_opts));
			print "\n";
			if ($vn_n = CLITools::numErrors()) {
				if ($vn_n > 1) {
					print CLITools::textWithColor(_t("(There were %1 errors)", $vn_n), "yellow")."\n";
				} else {
					print CLITools::textWithColor(_t("(1 error occurred)"), "yellow")."\n";
				}
			} else {
				$vn_error_code = 0;
			}
			print "\n";
		}
	} else {
		//
		// List available commands
		//

		$va_methods = get_class_methods("CLITools");

		if ($vs_cmd) {
			print CLITools::textWithColor("\"{$vs_cmd}\" is an invalid command. Valid commands are:", "bold_green")."\n\n";
		} else {
			print CLITools::textWithColor("You must specify a valid command. Valid commands are:", "bold_red")."\n\n";
		}

		$va_by_class = array();
		foreach($va_methods as $vs_method) {
			if (!CLITools::isCommand($vs_method)) { continue; }
			if(preg_match("!Help$!", $vs_method)) { continue; }
			if(preg_match("!ParamList$!", $vs_method)) { continue; }
			if(preg_match("!UtilityClass$!", $vs_method)) { continue; }
			$vs_class = call_user_func("CLITools::{$vs_method}UtilityClass");
			$va_by_class[$vs_class][$vs_method] = CLITools::textWithColor(str_pad(str_replace("_", "-", $vs_method), 30), "red")."\t".wordwrap(call_user_func("CLITools::{$vs_method}ShortHelp"), 75, "\n\t".str_repeat(" ", 30)."\t");
		}

		ksort($va_by_class);
		foreach($va_by_class as $vs_class => $va_methods) {
			print CLITools::textWithColor($vs_class, "bold_green")."\n\n";
			ksort($va_methods);
			foreach($va_methods as $vs_method => $vs_description) {
				print "\t{$vs_description}\n\n";
			}
		}

		print "\nFor more information visit http://www.collectiveaccess.org\n\n";
	}

	# --------------------------------------------------------
	/**
	 * Try to locate and load setup.php bootstrap file. If load fails return false and
	 * let the caller handle telling the user.
	 *
	 * @return bool True if setup.php is located and loaded, false if setup.php could not be found.
	 */
	function _caToolsLoadSetupPHP() {
		$vs_setup_path = 'setup.php';

		// try to get hostname off of argv since we need that before anything else in a multi-database installation
		// also detect the --setup flag, which accepts a path to an alternate setup.php
		if (isset($_SERVER['argv']) && is_array($_SERVER['argv'])) {
			foreach($_SERVER['argv'] as $vs_opt) {
				if (preg_match("!^\-\-hostname\=([A-Za-z0-9_\-\.:]+)!", $vs_opt, $va_matches) || preg_match("!^\-h\=([A-Za-z0-9_\-\.:]+)!", $vs_opt, $va_matches)) {
					$_SERVER['HTTP_HOST'] = $va_matches[1];
					break;
				}
				if (preg_match('!^\-\-setup\=([A-Za-z0-9_\-\/\.:]+)$!', $vs_opt, $va_matches)) {
					$vs_setup_path = $va_matches[1];
					break;
				}
			}
		}

		// Look for environment variable
		$vs_path = getenv("COLLECTIVEACCESS_HOME");
		if (file_exists("{$vs_path}/{$vs_setup_path}")) {
			require_once("{$vs_path}/{$vs_setup_path}");
			return true;
		}

		// Look in current directory and then in parent directories
		$va_cwd = explode("/", ltrim(__FILE__, "/")); array_pop($va_cwd);
		while(sizeof($va_cwd) > 0) {
			$vs_setup_path_fallback = "/".join("/", $va_cwd)."/".$vs_setup_path;
			if (file_exists($vs_setup_path_fallback)) {
				// Guess paths based upon location of setup.php (*should* work)
                if (!isset($_SERVER['DOCUMENT_ROOT']) || !$_SERVER['DOCUMENT_ROOT']) { $_SERVER['DOCUMENT_ROOT'] = '/'.join("/", $va_cwd); }
                $_SERVER['SCRIPT_FILENAME'] = __FILE__;
                if (!isset($_SERVER['HTTP_HOST']) || !$_SERVER['HTTP_HOST']) { $_SERVER['HTTP_HOST'] = 'localhost'; }

				require_once($vs_setup_path_fallback);
				return true;
			}
			array_pop($va_cwd);
		}

		// Give up and die
		return false;
	}
	# --------------------------------------------------------
	exit($vn_error_code);
